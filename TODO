Development of DB_DataObject_NG (Next Generation DataObject)..

To assist in the development of addtional features for the growth of DB_DataObject, 
the plan is to develop an extended version DB_DataObject_NG, which extends the current
version and adds alot of the more experiemental features as listed below..

Features from the NG version can then be carefully moved back into the core DataObject.




Current TODO list:
----------------------------------


    Issue: More detailed cached table information

        make available an extra ini file database.details.ini, which contains
        [table]
        column = type:size:notnull: etc. 
        from the tableInfo() call
        
        to allow quick lookup/retrieval of this data for any purpose...
        
        *****Updated based on DB_DataObject_NG 
        
        the plan here is to move to an XML based caching format, along with a class based
        description layer, 
        
        Add:method - getTableColumnObject('column name'); 
            returns an object (which includes utililites specifically useful for that type of object)
            // eg. validation?, date conversion...???/
            
        

    Issue: Table Rebuilds
        
        If you modify the database table, then DB_DataObject will be unaware of the change until you
        run createTables.php again.
        
        
        Solution:
        if the 'production' option is off, then it should rebuild the table information at the same time as loading
        the table description. and compare the current definition to the new generated one...
        
        
     
    Issue: Replace 

        Mysql has a nice replace feature, It would be nice to have in dataObjects
        
        Solution:
        Add a method, if the database is mysql, use the native 'REPLACE call'
        otherwise, do a select on ID then insert|update..

    
    
    Issue: Simplify the connection configuration.
        
        Current suggestion is to replace 
            database = dsn
        with 
            default_database = dsn
        and treat default more like a database name

    Issue: adding more realms to configuration
        
        Proposal here is to add realms for database dsn's, table mappings etc. along
        with hard coding the location of database cache files...
        
        
        
    Issue: connection Pooling and resources (Mostly Done)
    
        Connections and Results have just been moved out of the getStaticProperty method, to
        a $GLOBALS array, and results are only stored when you do find (Eg. not for insert/update/delete)
         - this already has a significant speed improvement. (over 10x faster when doing 3000+ inserts)
         
        It has been suggested that storing the connection/result in the object may be an idea, this 
        needs more study on what performance impact (both speed and memory)
        it has when doing things like
        
        while ($dbo->fetch()) {
            $array[] = $dbo->__clone();
        }
        
        along with this, it may be worth considering if a Connection Manager class can be spun off.?
        
        
    Issue: Persistant Storage..
    
        At present DB_DataObject, caches results to get queries, within the same page, this can be 
        expected to work 'most of the time', as most of the time concurrent updates are not that frequent.
        however, it is expected that the object may be used in a situation where this may affect it.
        
        As well as this, there may be times where it is preferable to have persistant storage over a number
        of page calls..
        
        The plan here is to implement a configuation option, that defaults to no caching, and can be set
        to either 
        a) do caching withing a single page request (as per current)
        b) do full caching with manual clearing... 
        c) do no caching.....
        
        along with this expanding the quantity of data being cached may be considered.
        
        either this, or a method, that specifically tags something as cachable.......
        
        
        
    Issue: RaiseError, should really use the dynamic, not static methods..
    
        DB_DataObject::raiseError should be replaced with $this->raiseError(), in most non static
        method calls.
    
    Issue: $__DB->dsn["database'] does not work with oracle.
        
        Need to work around this somehow... ???
        
    Issue :Generator does not work with oracle..
        
        Looks like it is using the wrong data from the Oracle getTableInfo call...
        
    Issue: use isset rather than @
        
        as it tokenizes down to one opcode, and is 'better practice..'
        
    Issue: dependant deletes.. / updates./ inserts
        
        Links.ini (or the future XML alternative?) could provide details on
        foreign keys - and force the deletion of data that is dependant on 
        one item..
        (updates & inserts could also do checks..)
        
/* ----------------------------- OLD - Done or Depreciated ----------------------------------------        
    
    
    Issue: Constructor/initializer is a bit kludgy, (depends on a small piece of global code)..
        
        Move to use ZE2's __construct() ?? method, and make generator create object constructors
        for the time being that call __construct().
        
        NOPE - have added global calls to call connect if required now


    Issue: Delete -- DONE 0.7

        delete can be called in many ways:
        
        $object->get(12);
        $object->delete();
        in which case deleting on the primary key is desired.
        
        $object->colour = 'red';
        $object->delete();
        in which case deleting on the _build_condition is desired
        (eg. when the primary key is not set)
        ** THIS DOES NOT APPEAR TO WORK *** CHECK THIS!!!
        
        $object->whereAdd("colour like 'r%');
        $object->delete(TRUE);
        works OK - just uses the where condition, not the values.


 
 
    Issue: Crosstable Joins - DONE 0.11 (or somewhere abou then)

        Althought the main documents indicate that a join version ended up being too complex, this
        was based on doing multiple joins on many tables. - It has been suggested (and code provided),
        that doing a simpler version may be possible:
        
         
        This is   currently implemented - check the source at present for usage examples 
            ** this need documenting...
            
        It would also be nice to have a better way to return join or link results...
            eg.
            getJoin('table'); // returns the dataobject for that table, based on the join results.
            in a similar way to the getLinks stuff..

